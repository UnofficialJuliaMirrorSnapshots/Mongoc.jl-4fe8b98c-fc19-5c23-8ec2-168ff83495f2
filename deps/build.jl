
using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = true #"--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libmongoc"], :libmongoc),
    LibraryProduct(prefix, ["libbson"], :libbson),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/felipenoris/mongo-c-driver-builder/releases/download/v1.14.0"
windows_bin_prefix = "https://github.com/felipenoris/mongo-c-driver-builder/releases/download/v1.14.0_1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    MacOS(:x86_64) => ("$bin_prefix/mongo-c-driver-builder.v1.14.0.x86_64-apple-darwin14.tar.gz", "89ba7693884bdda632fa66d33307140f23fabd9b330fa1ae13d83a31f09eea1e"),
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/mongo-c-driver-builder.v1.14.0.aarch64-linux-gnu.tar.gz", "f87801fa01fb839428cd69fb77af9c77378784f8521bcc8e50e1e47ccbbfab8e"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/mongo-c-driver-builder.v1.14.0.aarch64-linux-musl.tar.gz", "e5dc4600c25bbcf81f0d5451daf6204a6c1fa23d15e3cee3abdda75d3c19982a"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/mongo-c-driver-builder.v1.14.0.arm-linux-gnueabihf.tar.gz", "055e746f0b93dd791db795c6aee205bf721d7ef3066be10e7e764435e25d35b8"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/mongo-c-driver-builder.v1.14.0.arm-linux-musleabihf.tar.gz", "7bf213020c14df7884a604e729f2abbb1a2937336d5e794894a10047454aef5c"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/mongo-c-driver-builder.v1.14.0.i686-linux-gnu.tar.gz", "a02ad3aeaea29cfd56bcec6bc4b72749dc870441c30de8a230666f485b5b89da"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/mongo-c-driver-builder.v1.14.0.i686-linux-musl.tar.gz", "f2ac3b1526c459889d614613c85116ecf2fc8c5da453c8e8a1b10cdbaef1d39d"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/mongo-c-driver-builder.v1.14.0.powerpc64le-linux-gnu.tar.gz", "2ed16f2f46f0b87ed2f2295433d8e6e0e46841dee3934a3f2e89271bd41a25dd"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/mongo-c-driver-builder.v1.14.0.x86_64-linux-gnu.tar.gz", "e49a56702ce40df8837490b89996572f3cc473d8ecfbd8a59cbe446863a22e32"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/mongo-c-driver-builder.v1.14.0.x86_64-linux-musl.tar.gz", "7468ca0168ba2411a4080fb0c09a65739dfddcd9fc253579ae2b449b26f707eb"),
    Windows(:x86_64) => ("$windows_bin_prefix/mongo-c-driver-builder.v1.14.0.x86_64-windows.tar.gz", "04b5eb428568797545136f6a4a07af4c0f00235d0a6182042e5eb21e562dbaeb"),
#    Windows(:x86_64, compiler_abi=CompilerABI(:gcc4, :cxx11)) => ("$windows_bin_prefix/mongo-c-driver-builder.v1.14.0.x86_64-windows.tar.gz", "04b5eb428568797545136f6a4a07af4c0f00235d0a6182042e5eb21e562dbaeb"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
